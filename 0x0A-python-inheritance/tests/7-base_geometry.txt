# ./tests/7-base_geometry.txt

>>> BaseGeometry = __import__("7-base_geometry").BaseGeometry


# Invalid area method (not subclassed)
>>> geometry = BaseGeometry()
>>> geometry.area()
Traceback (most recent call last):
    ...
Exception: area() is not implemented

# Valid integer_validator method with positive integer
>>> geometry = BaseGeometry()
>>> geometry.integer_validator("test", 42)

# Valid integer_validator method with zero
>>> geometry.integer_validator("test", 0)
Traceback (most recent call last):
    ...
ValueError: test must be greater than 0

# Invalid integer_validator method with non-integer value
>>> geometry.integer_validator("test", "string")
Traceback (most recent call last):
    ...
TypeError: test must be an integer

# Invalid integer_validator method with negative value
>>> geometry.integer_validator("test", -42)
Traceback (most recent call last):
    ...
ValueError: test must be greater than 0

# Invalid integer_validator method with missing value
>>> geometry = BaseGeometry()
>>> geometry.integer_validator("test")
Traceback (most recent call last):
    File "/usr/lib/python3.8/doctest.py", line 1336, in __run
    exec(compile(example.source, filename, "single",
    File "<doctest 7-base_geometry.txt[9]>", line 1, in <module>
    geometry.integer_validator("test")
TypeError: integer_validator() missing 1 required positional argument: 'value'

# Invalid integer_validator method with tuple containing an integer
>>> geometry = BaseGeometry()
>>> geometry.integer_validator("test", (100,))
Traceback (most recent call last):
    ...
TypeError: test must be an integer

# Invalid integer_validator method with list containing an integer
>>> geometry = BaseGeometry()
>>> geometry.integer_validator("test", [1])
Traceback (most recent call last):
    ...
TypeError: test must be an integer

# Invalid integer_validator method with dictionary
>>> geometry = BaseGeometry()
>>> geometry.integer_validator("test", {"key": 42})
Traceback (most recent call last):
    ...
TypeError: test must be an integer

# Invalid integer_validator method with None
>>> geometry = BaseGeometry()
>>> geometry.integer_validator("test", None)
Traceback (most recent call last):
    ...
TypeError: test must be an integer

# Invalid integer_validator method with boolean value (True)
>>> geometry = BaseGeometry()
>>> geometry.integer_validator("test", True)
Traceback (most recent call last):
    ...
TypeError: test must be an integer

# Invalid integer_validator method with boolean value (False)
>>> geometry = BaseGeometry()
>>> geometry.integer_validator("test", False)
Traceback (most recent call last):
    ...
TypeError: test must be an integer
